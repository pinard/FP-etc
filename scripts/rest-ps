#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright © 2004 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 2004.

"""\
Transformer un document reST en PostScript.

Usage: rest-ps [OPTION]... ENTRÉE

Options:
  -l   Passer par LaTeX plutôt que HtmlDoc.
  -n   Pas de lignes dans les cadres de tableaux.
  -p   Utiliser une fonte de 11 points plutôt que 12 points.
  -r   Utiliser le format "report" plutôt que le format "article",
       (les titres sont plus gros et il y a plus de sauts de page).

Les options ``-npr`` n'ont de sens qu'avec l'option ``-l``.

La sortie sera nommée d'après l'entrée, en remplaçant l'extension ``.txt``
par ``.ps``.
"""

__metaclass__ = type
import os, subprocess, sys

class Main:
    latex = False
    points = '12pt'
    documentclass = 'article'
    table_style = 'standard'

    def main(self, *arguments):
        if not arguments:
            sys.stdout.write(__doc__)
            return
        # Décoder la commande.
        import getopt
        options, arguments = getopt.getopt(arguments, 'lnpr')
        for option, valeur in options:
            if option == '-l':
                self.latex = True
            elif option == '-n':
                self.table_style = 'nolines'
            elif option == '-p':
                self.points = '11pt'
            elif option == '-r':
                self.documentclass = 'report'
        assert len(arguments) == 1, arguments
        original = arguments[0]
        # Déterminer les paramètres de rst2latex.
        if original.endswith('.txt'):
            prefixe = original[:-4]
        else:
            prefixe = original
        texte = file(original).read()
        overrides = {'language': 'fr',
                     'output_encoding': 'latin1',
                     'output_encoding_error_handler': 'backslashreplace',
                     'documentclass': self.documentclass,
                     'documentoptions': self.points,
                     'table-style': self.table_style}
        charset = deviner_charset(texte)
        if charset == 'ISO-8859-1':
            overrides['input_encoding'] = 'latin1'
        elif charset == 'UTF-8':
            overrides['input_encoding'] = 'utf8'
        from docutils.core import publish_string
        if self.latex:
            # Transformer le document en LaTeX.
            texte = publish_string(source=file(original).read(),
                                   writer_name='latex',
                                   settings_overrides=overrides)
            file('%s-tmp.tex' % prefixe, 'w').write(texte)
            # Produire le PostScript.
            subprocess.call(['latex', '%s-tmp.tex' % prefixe])
            subprocess.call(['dvips', '%s-tmp.dvi' % prefixe])
            os.rename('%s-tmp.ps' % prefixe, '%s.ps' % prefixe)
        else:
            # Transformer le document en HTML.
            texte = publish_string(source=file(original).read(),
                                   writer_name='html',
                                   settings_overrides=overrides)
            file('%s-tmp.html' % prefixe, 'w').write(texte)
            # Produire le PostScript.
            subprocess.call(['htmldoc', '--webpage', '-f',
                             '%s-tmp.ps' % prefixe, '%s-tmp.html' % prefixe])
            os.rename('%s-tmp.ps' % prefixe, '%s.ps' % prefixe)
        # Nettoyer.
        from glob import glob
        for nom in glob('%s-tmp.*' % prefixe):
            os.remove(nom)

def deviner_charset(tampon):
    for charset in 'ASCII', 'UTF-8':
        try:
            tampon.decode(charset)
        except UnicodeDecodeError:
            pass
        else:
            return charset
    import re
    if not re.search('[\x80-\x9f]', tampon):
        return 'ISO-8859-1'
    return '[Unknown]'

run = Main()
main = run.main

if __name__ == '__main__':
    main(*sys.argv[1:])
