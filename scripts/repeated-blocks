#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright © 2009 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 2009.

"""\
Find clusters of similar tokens in a group of files.

Usage: repeated-blocks [Option]... [File]...

Options:
  -h           Print this help, then exits
  -b           A token is a run of non-whitespace characters (blob)
  -l           A token is exactly an input line (line)
  -w           A token is a run of word constituent characters (word)
  -m MINIMUM   Minimum number of tokens in a block (default 3)
  -M MAXIMUM   Maximum number of tokens in a block (no default)
  -f           Print output sorted by first file and position
  -v           Entertain users about processing steps
  -x           Also read a list of file names from standard input

If none of -b, -l or -l, then -l is assumed.

With -x, standard input holds one file name per line.  Without -x and
without File arguments, read and process standard input contents.

With -f, files in output are ordered the same as they appear in the
argument list (so, to get lexicographical order, make sure the arguments
given are already sorted).  Without -f, output is sorted by decreasing
block length in tokens, and then, by decreasing number of occurrences.
"""

__metaclass__ = type
import re, sys

class Main:
    verbose = False
    minimum = 3
    maximum = None
    filesort = False
    xargs = False
    token = None

    def main(self, *arguments):

        # Decode options
        import getopt
        options, arguments = getopt.getopt(arguments, 'bfhlm:M:vxw')
        for option, value in options:
            if option == '-b':
                assert self.token is None, self.token
                self.token = 'blob'
            elif option == '-f':
                self.filesort = True
            elif option == '-h':
                sys.stdout.write(__doc__)
                return
            elif option == '-l':
                assert self.token is None, self.token
                self.token = 'line'
            elif option == '-m':
                self.minimum = int(value)
            elif option == '-M':
                self.maximum = int(value)
            elif option == '-v':
                self.verbose = True
            elif option == '-x':
                self.xargs = True
            elif option == '-w':
                assert self.token is None, self.token
                self.token = 'word'
        if self.token is None:
            self.token = 'line'

        # Launch the work.
        buffers = self.readin_files(arguments)
        clusters = self.initialize_clusters(buffers)
        clusters = self.grow_clusters(clusters)
        clusters = self.delete_overlaps(clusters)
        self.print_clusters(clusters)

    def readin_files(self, arguments):
        buffers = []
        if arguments:
            for argument in arguments:
                buffers.append(Buffer(argument, file(argument)))
        elif not self.xargs:
            buffers.append(Buffer('<stdin>', sys.stdin))
        if self.xargs:
            for line in sys.stdin:
                argument = line.rstrip()
                buffers.append(Buffer(argument, file(argument)))
        if self.verbose:
            buffer_count = len(buffers)
            token_count = 0
            for buffer in buffers:
                token_count += len(buffer)
            sys.stderr.write("Read %d files and %d %ss\n"
                             % (buffer_count, token_count, self.token))
        return buffers

    def initialize_clusters(self, buffers):
        # Initialize clusters, which is a list.  Each cluster is a list of
        # at least two blocks with identical string contents.

        data = []
        for buffer in buffers:
            tokens = []
            for index in range(len(buffer)):
                token = buffer.get(index)
                if len(tokens) == self.minimum:
                    tokens.pop(0)
                tokens.append(token)
                if len(tokens) == self.minimum:
                    block = Block(buffer, index + 1 - self.minimum, index + 1)
                    data.append((tuple(tokens), block))
        data.sort()
        previous = None
        clusters = []
        cluster = []
        for contents, block in data:
            if contents == previous:
                cluster.append(block)
            else:
                if len(cluster) >= 2:
                    clusters.append(cluster)
                cluster = [block]
                previous = contents
        if len(cluster) >= 2:
            clusters.append(cluster)
        if self.verbose:
            if clusters:
                block_count = 0
                minimum = None
                maximum = None
                for cluster in clusters:
                    if minimum is None or len(cluster) < minimum:
                        minimum = len(cluster)
                    if maximum is None or len(cluster) > maximum:
                        maximum = len(cluster)
                    block_count += len(cluster)
                sys.stderr.write(
                        "Initialized %d clusters using from %d to %d blocks"
                        " (%.1f average)\n"
                        % (len(clusters), minimum, maximum,
                           float(block_count) / len(clusters)))
            else:
                sys.stderr.write("No cluster found\n")
        return clusters

    def grow_clusters(self, given_clusters):
        # Extend each cluster as much as possible.

        def grow_cluster(given_cluster):
            while True:
                map = {}
                for block in given_cluster:
                    if block.limit < len(block.buffer):
                        token = block.buffer.get(block.limit)
                    else:
                        token = None
                    if block.first not in block.buffer.nested:
                        if token in map:
                            map[token].append(block)
                        else:
                            map[token] = [block]
                for token, blocks in map.items():
                    if len(blocks) == 1 and token is not None:
                        if None in map:
                            map[None] += blocks
                        else:
                            map[None] = blocks
                        del map[token]
                for token, blocks in map.items():
                    if len(blocks) == 1:
                        del map[token]
                if len(map) < 2:
                    if not map:
                        break
                    # Simulate tail recursion in this case.
                    token, cluster = map.items()[0]
                    if token is None:
                        for block in cluster:
                            block.mark_nested()
                        cluster.sort()
                        clusters.append(cluster)
                        break
                    for block in cluster:
                        block.limit += 1
                    given_cluster = cluster
                    continue
                for token, cluster in map.iteritems():
                    if len(cluster) >= 2:
                        if token is None:
                            for block in cluster:
                                block.mark_nested()
                            cluster.sort()
                            clusters.append(cluster)
                        else:
                            for block in cluster:
                                block.limit += 1
                            grow_cluster(cluster)
                break

        clusters = []
        for cluster in given_clusters:
            grow_cluster(cluster)
        if self.verbose and clusters:
            token_count = 0
            minimum = None
            maximum = None
            for cluster in clusters:
                length = cluster[0].limit - cluster[0].first
                if minimum is None or length < minimum:
                    minimum = length
                if maximum is None or length > maximum:
                    maximum = length
                token_count += length
            sys.stderr.write(
                    "Grown %d clusters having from %d to %d %ss"
                    " (%.1f average)\n"
                    % (len(clusters), minimum, maximum, self.token,
                       float(token_count) / len(clusters)))
        return clusters

    def delete_overlaps(self, given_clusters):
        data = []
        for cluster in given_clusters:
            for block in cluster:
                data.append((block.buffer, -block.limit, block.first, block))
        data.sort()
        previous = None
        for datum in data:
            block = datum[-1]
            if (previous is not None
                    and block.buffer == previous.buffer
                    and block.limit == previous.limit):
                assert block.first != previous.first
                block.nested = True
            previous = block
        clusters = []
        for cluster in given_clusters:
            cluster = [block for block in cluster if not block.nested]
            if len(cluster) >= 2:
                clusters.append(cluster)
        if self.verbose:
            deleted = len(given_clusters) - len(clusters)
            if deleted:
                sys.stderr.write("Deleted %d more overlapping clusters\n"
                                 % deleted)
        return clusters

    def print_clusters(self, clusters):
        if self.filesort:
            clusters.sort()
        else:
            data = [(-(cluster[0].limit - cluster[0].first),
                     len(cluster), cluster)
                    for cluster in clusters]
            data.sort()
            clusters = [datum[-1] for datum in data]

        write = sys.stdout.write
        for counter, cluster in enumerate(clusters):
            block = cluster[0]
            suffix = (" Cluster %d/%d (%d %ss)\n"
                      % (counter + 1, len(clusters),
                         block.limit - block.first, self.token))
            write('=' * (80 - len(suffix)))
            write(suffix)
            for counter2, block in enumerate(cluster):
                write('%s: Repeat %d/%d\n'
                      % (block.reference(),
                         counter2 + 1, len(cluster)))
            write('\n')
            write(str(cluster[0]))
        if self.verbose and clusters:
            block_count = 0
            line_count = 0
            for cluster in clusters:
                block_count += len(cluster)
                line_count += cluster[0].limit - cluster[0].first
            sys.stderr.write("Printed %d clusters, %d locations, %d %ss\n"
                             % (len(clusters), block_count, line_count,
                                self.token))

class Buffer:
    ordinal = 0

    def __init__(self, name, handle):
        self.name = name
        if run.token == 'blob':
            pattern = re.compile('\\S+')
        elif run.token == 'line':
            pattern = re.compile('.+')
        elif run.token == 'word':
            pattern = re.compile('\\w+')
        self.text = handle.read()
        self.start = []
        self.end = []
        for match in re.finditer(pattern, self.text):
            self.start.append(match.start())
            self.end.append(match.end())
        Buffer.ordinal += 1
        self.ordinal = Buffer.ordinal
        self.nested = set()

    def __repr__(self):
        return 'Buffer-%d' % self.ordinal

    def __cmp__(self, other):
        return cmp(self.ordinal, other.ordinal)

    def __len__(self):
        return len(self.start)

    def get(self, index):
        return self.text[self.start[index]:self.end[index]]

class Block:
    nested = False

    def __init__(self, buffer, first, limit):
        self.buffer = buffer
        self.first = first
        self.limit = limit

    def __repr__(self):
        text = self.buffer.text
        start = self.buffer.start[self.first]
        end = self.buffer.end[self.limit-1]
        return '%r<%r>' % (self.buffer, text[start:end])

    def __str__(self):
        text = self.buffer.text
        start = self.buffer.start[self.first]
        end = self.buffer.end[self.limit-1]
        position = text.rfind('\n', 0, start)
        if position > 0 and not text[position+1:start].strip():
            start = position + 1
        if end < len(text) and text[end] == '\n':
            return text[start:end+1]
        return text[start:end] + '\n'

    def __cmp__(self, other):
        return (cmp(self.buffer, other.buffer)
                or cmp(self.first, other.first)
                or cmp(other.limit, self.limit))

    def reference(self):
        name = self.buffer.name
        line = (self.buffer.text.count('\n', 0, self.buffer.start[self.first])
                + 1)
        return '%s:%d' % (name, line)

    def mark_nested(self):
        nested = self.buffer.nested
        for index in range(self.first, self.limit):
            nested.add(index)

run = Main()
main = run.main

if __name__ == '__main__':
    main(*sys.argv[1:])
