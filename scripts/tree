#!/usr/bin/env python3
# Copyright © 1996, 1999, 2000, 2002, 2003 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 1996.

# Idea from Pierre Rioux <riouxp@bch.umontreal.ca>, 1996-07-12.

"""\
Produce directory hierarchy with sizes, well sorted and indented.

Usage: tree [OPTION]... PATH...

  -a          produce an Emacs allout display (inhibits -pm)
  -p          display sizes vertically within a single prefix column
  -m          if not -p, mirror the structure while displaying sizes
  -b          within a directory, show biggest hierarchies first
  -l LEVEL    disregard directories more than LEVEL levels deep
  -s SIZE     disregard hierarchies smaller than SIZE Kb

By default, sizes are printed before the name, and sort is lexicographical.
Use `.' to list the current directory.

Option `-a' is useful to identify big hierarchies, especially with `-b', for
when Emacs has `allout' pre-loaded to override the more standard `outline'.
I also have some Emacs code to colorize each level differently.  One can hide
a whole hierarchy with `C-c h', and reveal one level at a time with `C-c i'.
"""

import os, subprocess, sys

class Main:
    def __init__(self):
        self.allout = False
        self.biggest = False
        self.mirror = False
        self.prefix = False
        self.level = None
        self.size = None

    def main(self, *arguments):
        if not arguments:
            sys.stdout.write(__doc__)
            sys.exit(0)
        # Decode options.
        import getopt
        options, arguments = getopt.getopt(arguments, 'abl:mps:')
        for option, value in options:
            if option == '-a':
                self.allout = True
            elif option == '-b':
                self.biggest = True
            elif option == '-l':
                self.level = int(value)
            elif option == '-m':
                self.mirror = True
            elif option == '-p':
                self.prefix = True
            elif option == '-s':
                self.size = int(value)
        pairs = self.obtain_pairs(arguments)
        if self.allout:
            self.format_allout(pairs)
        else:
            self.format_normal(pairs)

    def obtain_pairs(self, arguments):
        # Get the data, properly filtered.
        pairs = []
        for line in subprocess.Popen(
                ['du'] + arguments, stdout=subprocess.PIPE).stdout:
            line = line.rstrip("\n/")
            text, path = line.split('\t')
            size = int(text)
            if self.size is None or size >= self.size:
                split = path.split('/')
                if self.level is None or len(split) <= self.level:
                    pairs.append([split, size])
        # Sort the information as wanted.
        if self.biggest:
            # REVOIR: Fonctionne pour 'tmp', mais pas pour `/tmp', où alors, il
            # faut utiliser `range(1, len(split))'.
            value = {}
            for split, size in pairs:
                value[tuple(split)] = -size
            items = []
            for split, size in pairs:
                items.append([(value[tuple(split[:counter+1])], split[counter])
                              for counter in range(len(split))])
            items.sort()
            pairs = []
            for item in items:
                pairs.append([[fragment for size, fragment in item],
                              -item[-1][0]])
        else:
            pairs.sort()
        return pairs

    def format_allout(self, pairs):
        bullets = '.:,;'
        write = sys.stdout.write
        write('*\t\t\t\t\t\tallout\t-*- outline -*-\n')
        for pair in pairs:
            split, size = pair
            depth = len(split) - 1
            write('.%s%s %d %s\n' % (' ' * depth,
                                     bullets[depth % len(bullets)],
                                     size, split[-1]))

    def format_normal(self, pairs):
        # Erase unneeded fragments of vertical lines.
        clean(pairs)
        pairs.reverse()
        clean(pairs)
        pairs.reverse()
        # Erase leftmost white columns.
        skip = False
        split, size = pairs[0]
        while not split[skip]:
            skip += 1
        # Format size information.
        margin_size = 0
        for pair in pairs:
            split, size = pair
            if self.prefix:
                pair[1] = '%d ' % size
            elif self.mirror:
                margin = '%d _/' % size
                items = split[skip:-1]
                items.reverse()
                for item in items:
                    if item:
                        margin = margin + '  |'
                    else:
                        margin = margin + '   '
                pair[1] = margin
            else:
                split[-1] = '%d %s' % (size, split[-1])
                pair[1] = ''
            margin_size = max(margin_size, len(pair[1]))
        # Produce resulting display.
        write = sys.stdout.write
        for split, margin in pairs:
            write(' ' * (margin_size - len(margin)))
            write(margin)
            for item in split[skip:-1]:
                if item:
                    write('|  ')
                else:
                    write('   ')
            write('\\_ %s\n' % split[-1])

def clean(pairs):
    # The basename is always written.  Intermediate directories normally
    # print as `|', yet None is used to inhibit the vertical line.
    draw = []
    for split, size in pairs:
        while len(draw) > len(split) - 1:
            del draw[-1]
        while len(draw) < len(split) - 1:
            draw.append(False)
        draw.append(True)
        for counter in range(len(split) - 1):
            if not draw[counter]:
                split[counter] = None

main = Main().main

if __name__ == '__main__':
    main(*sys.argv[1:])
