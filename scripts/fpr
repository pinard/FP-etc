#!/usr/bin/env python3
# Copyright © 2005 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 2005.

"""\
Transformer un fichier utilisant, en colonne 1 de chaque ligne, un
caractère de contrôle de l'imprimante comme en FORTRAN ou PL/I.

Usage: fpr [OPTION]... [FICHIER]...

Options:

  -h   Fournir cette aide.
  -M   Mettre tout le texte en majuscules.
  -m   Mettre tout le texte en minuscules.
  -r   Raboter les symboles diacritiques.

Si aucun fichier n'est fourni, lire l'entrée standard.
Toujours produire le résultat sur la sortie standard.
"""

import sys

class Main:
    majuscules = False
    minuscules = False
    rabotage = None

    def main(self, *arguments):
        import getopt
        options, arguments = getopt.getopt(arguments, 'hMmr')
        for option, valeur in options:
            if option == '-h':
                sys.stdout.write(__doc__)
                return
            elif option == '-M':
                self.majuscules = True
            elif option == '-m':
                self.minuscules = True
            elif option == '-r':
                self.rabotage = ''
                import unicodedata
                for compteur in range(256):
                    texte = unicodedata.decomposition(chr(compteur))
                    if not texte or texte.startswith('<'):
                        self.rabotage += chr(compteur)
                    else:
                        self.rabotage += chr(int(texte.split()[0], 16))
        assert not (self.majuscules and self.minuscules)
        if arguments:
            for argument in arguments:
                self.transformer(file(argument))
        else:
            self.transformer(sys.stdin)

    def transformer(self, lignes):
        write = sys.stdout.write
        for ligne in lignes:
            # S'occuper des lignes vides.
            ligne = ligne.rstrip()
            if not ligne:
                write('\n')
                continue
            # S'occuper des options -mMr.
            if self.rabotage is not None:
                ligne = ligne.translate(self.rabotage)
            if self.majuscules:
                ligne = ligne.upper()
            elif self.minuscules:
                ligne = ligne.lower()
            # S'occuper de la colonne 1.
            if ligne[0] == ' ':
                write(ligne[1:] + '\n')
            elif ligne[0] == '0':
                write('\n' + ligne[1:] + '\n')
            elif ligne[0] == '-':
                write('\n\n' + ligne[1:] + '\n')
            elif ligne[0] == '1':
                write('\f' + ligne[1:] +  '\n')
            elif ligne[0] == '+':
                write('\r' + ligne[1:] +  '\n')
            elif ligne[0] == '\x1a':
                # Le Ctrl-Z de MS-DOS? !!!
                break
            else:
                assert False, repr(ligne)

run = Main()
main = run.main

if __name__ == '__main__':
    main(*sys.argv[1:])
