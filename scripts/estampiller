#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright © 1994, 1996, 2001, 2002, 2003 Progiciels Bourbeau-Pinard inc.
# François Pinard <pinard@iro.umontreal.ca>, 1994.

u"""\
Change time-stamp of whole email folder according to Date: headers.

Usage: restamp-folder [OPTION]... FILE...

Options:
  -o  Use the older date found, instead of the newest found.
  -v  List files as they are processed.
"""

__metaclass__ = type
import os, sys

class run:
    verbose = False
    older = False

def main(*arguments):
    if not arguments:
        sys.stdout.write(__doc__)
        return
    import getopt
    options, arguments = getopt.getopt(arguments, 'ov')
    for option, value in options:
        if option == '-o':
            run.older = True
        elif option == '-v':
            run.verbose = True
    error = sys.stderr.write
    write = sys.stdout.write
    for folder in arguments:
        if not os.path.isfile(folder):
            write(u"WARNING: %s: not a regular file\n" % folder)
            continue
        if run.verbose:
            error('%s...' % folder)
        date = find_best_date(file(folder).read())
        if date is None:
            if run.verbose:
                error(' No date found...')
            else:
                error(u"WARNING: %s: no date found\n" % folder)
        else:
            import stat, time
            atime = os.stat(folder)[stat.ST_ATIME]
            mtime = time.mktime(date)
            os.utime(folder, (atime, mtime))
        if run.verbose:
            error(' done\n')

def find_best_date(buffer):
    prefix = '\nDate:'
    suffix = '\n'
    best = None
    start = 0
    while start >= 0:
        start = buffer.find(prefix, start)
        if start < 0:
            break
        start = start + len(prefix)
        end = buffer.find(suffix, start)
        if end >= 0:
            field = buffer[start:end].strip()
            start = end + len(suffix)
        else:
            field = buffer[start:].strip()
            start = -1
        current = find_date(field)
        if current is not None:
            if (best is None
                or (run.older and current < best)
                or (not run.older and current > best)):
                best = current
    return best

def find_date(buffer):
    from email.Utils import parsedate
    date = parsedate(buffer)
    if date is not None:
        return date
    import re
    match = re.match('([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2})',
                     buffer)
    if match:
        return (int(match.group(1)), int(match.group(2)), int(match.group(3)),
                int(match.group(4)), int(match.group(5)), 0, 0, 0, 0)

if __name__ == '__main__':
    main(*sys.argv[1:])
